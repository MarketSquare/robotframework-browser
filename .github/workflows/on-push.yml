# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Continuous integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '15 10 * * *'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        python-version: [3.7, 3.8, 3.9]
        node-version: [14.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: restore node_modules and playwright drivers
      uses: actions/cache@v2
      with:
        path: |
          node_modules
          */*/node_modules
          /home/runner/.cache/ms-playwright
          C:\Users\runneradmin\AppData\Local\ms-playwright
        key: ${{ runner.os }}-${{ hashFiles('**/yarn.lock') }}-node-and-pw
    - name: Install nodejs dependencies
      env:
        PLAYWRIGHT_BROWSERS_PATH: 0
      run: |
        yarn --frozen-lockfile install
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r Browser/dev-requirements.txt
    - name: Build Protos and check with tsc
      run: |
        inv node-build
        python -m Browser.gen_stub
    - name: Check types with mypy
      run: |
        mypy --config-file Browser/mypy.ini Browser
    - name: Lint atest
      run: |
        inv lint-robot
    - name: Check with flake8
      run: |
        flake8 --config Browser/.flake8 Browser
    - name: Start xvfb on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        export DISPLAY=:99.0
        Xvfb -ac :99 -screen 0 1280x1024x16 > /dev/null 2>&1 &
    - name: Run pytests
      run: |
       coverage run -m invoke utest
       coverage report
    - name: Run Robot Framework tests on linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        xvfb-run --auto-servernum inv atest  -z true
    - name: Run Robot Framework tests on Windows
      if: matrix.os != 'ubuntu-latest'
      run: |
        inv atest -z true
    - name: Create Distributable Package
      run: |
        inv docs
        inv create-package
    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: Test results
        path: zip_results/output
    - uses: actions/upload-artifact@v2
      with:
        name: rfbrowser-wheel 
        path: dist/robotframework_browser-*-py3-none-any.whl
    - name: Artifacts download for flaky test analysis
      if: ${{ failure() && matrix.os != 'windows-latest' }}
      run : |
        python download_file.py --project  MarketSquare --repo robotframework-browser --token ${{ secrets.GITHUB_TOKEN }}
        inv copy-xunit
    - uses: F-Secure/flaky-tests-detection@master
      if: ${{ failure() && matrix.os != 'windows-latest' }}
      with:
        args: --junit-files=flip_rate/xunit/ --grouping-option=days --window-size=2 --window-count=5 --top-n=10
    - name: Package demoapp
      run: |
        inv demo-app
    - uses: actions/upload-artifact@v2
      with:
        name: demoapp
        path: zip_results/demoapp
  test-install:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: [3.8]
        node-version: [12.x, 14.x]
    steps:
      - uses: actions/checkout@v2
      - name: Download package for install testing
        uses: actions/download-artifact@v2
        with:
          name: rfbrowser-wheel
      - name: Download package for install testing
        uses: actions/download-artifact@v2
        with:
          name: demoapp
          path: zip_results/demoapp
      - name: Unzip demoapp in linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          ls -l zip_results/demoapp
          unzip -o zip_results/demoapp/demo-app-linux.zip
      - name: Unzip demoapp in windows
        if: matrix.os == 'windows-latest'
        run: |
          dir zip_results/demoapp
          tar -xf zip_results/demoapp/demo-app-win32.zip
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Robot Framework Browser on unix-like
        run: |
          pip install ./robotframework_browser-*-py3-none-any.whl
        if: matrix.os != 'windows-latest'
      - name: Install Robot Framework Browser on windows
        run: |
          pip install (gci *.whl)
        if: matrix.os == 'windows-latest'
      - name: Install node deps and python deps for test running
        run: |
          rfbrowser init
          pip install -r Browser/dev-requirements.txt
      - name: Needed step for some reason
        run: |
          echo "nothing happening here"
        env:
          blank: ""
      - name: Test on unix-like os - serial mode
        if: matrix.os != 'windows-latest'
        run: |
          echo ${{ matrix.os }}
          rm -rf Browser
          export DISPLAY=:99.0
          Xvfb -ac :99 -screen 0 1280x1024x16 > /dev/null 2>&1 &
          inv sitecustomize
          xvfb-run --auto-servernum invoke atest-robot
      - name: Run Robot Framework tests on windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          inv atest-global-pythonpath
      - name: Artifacts download for flaky test analysis
        if: ${{ failure() && matrix.os != 'windows-latest' }}
        run: |
          python download_file.py --project  MarketSquare --repo robotframework-browser --token ${{ secrets.GITHUB_TOKEN }}
          inv copy-xunit
      - uses: F-Secure/flaky-tests-detection@master
        if: ${{ failure() && matrix.os != 'windows-latest' }}
        with:
          args: --junit-files=flip_rate/xunit/ --grouping-option=days --window-size=2 --window-count=5 --top-n=10
      - name: Uninstall on Linux
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          rfbrowser clean-node
          pip uninstall --yes robotframework-browser
      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: ${{ matrix.os }} ${{ matrix.node-version }} Clean install results
          path: atest/output
  automerge:
    name: Automerge Dependabot
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' && github.event_name == 'pull_request'
    needs: test-install
    steps:
      - name: 'Wait for status checks'
        id: waitforstatuschecks
        uses: "WyriHaximus/github-action-wait-for-status@v1.2"
        with:
          ignoreActions: Automerge Dependabot
          checkInterval: 13
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: Merge pull requests
        uses: pascalgn/automerge-action@v0.12.0
        if: steps.waitforstatuschecks.outputs.status == 'success'
        env:
          MERGE_METHOD: "squash"
          MERGE_LABELS: ""
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
