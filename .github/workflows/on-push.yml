# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Continuous integration

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '15 10 * * *'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]
        python-version: [3.7, 3.8, 3.9]
        node-version: [12.x, 14.x, 16.x]
        exclude:
          # Exclude some configurations to make the matrix smaller
          - python-version: 3.7
            node-version: 12.x
          - os: windows-latest
            node-version: 14.x
          - os: ubuntu-latest
            python-version: 3.7
          # Exclude many macOS versions because macOS node's often have long waiting times and seem overprovisioned / buggy
          - os: macos-latest
            python-version: 3.8
          - os: macos-latest
            python-version: 3.7
          - os: macos-latest
            node-version: 12.x
          - os: macos-latest
            node-version: 14.x
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install nodejs dependencies
      env:
        PLAYWRIGHT_BROWSERS_PATH: 0
      run: |
        npm ci
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    - name: Install python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel
        pip install -r Browser/dev-requirements.txt
    - name: Build Protos and check with tsc
      run: |
        inv node-build
        python -m Browser.gen_stub
    - name: Check types with mypy on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        inv lint-python
    - name: Lint atest
      run: |
        inv lint-robot
    - name: Check with flake8
      run: |
        flake8 --config Browser/.flake8 Browser
    - name: Build test app
      run: |
        inv create-test-app
    - name: Start xvfb on Linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        export DISPLAY=:99.0
        Xvfb -ac :99 -screen 0 1280x1024x16 > /dev/null 2>&1 &
    - name: Run pytests
      run: |
       coverage run -m invoke utest
       coverage report
    - name: Run Robot Framework tests on linux
      if: matrix.os == 'ubuntu-latest'
      run: |
        xvfb-run --auto-servernum inv atest  -z true
    - name: Run Robot Framework tests on Windows
      if: matrix.os == 'windows-latest'
      run: |
        inv atest-robot -z true
    - name: Run Robot Framework tests on macOS
      if: matrix.os == 'macos-latest'
      run: |
        inv atest -z true
    - name: Create Distributable Package
      run: |
        inv docs
        inv create-package
    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      with:
        name: Test results
        path: zip_results/output
    - uses: actions/upload-artifact@v2
      with:
        name: rfbrowser-wheel 
        path: dist/robotframework_browser-*-py3-none-any.whl
    - name: Artifacts download for flaky test analysis
      if: ${{ failure() }}
      run : |
        pip install flaky-tests-detection
        python download_file.py --project  MarketSquare --repo robotframework-browser --token ${{ secrets.GITHUB_TOKEN }}
        inv copy-xunit
    - name: Flaky tests detection
      if: ${{ failure() }}
      run: |
        flaky --junit-files=flip_rate/xunit/ --grouping-option=days --window-size=2 --window-count=5 --top-n=10
    - name: Package demoapp
      run: |
        inv demo-app
    - uses: actions/upload-artifact@v2
      with:
        name: demoapp
        path: zip_results/demoapp
  test-install:
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: [3.7, 3.9]
        node-version: [12.x, 16.x]
    steps:
      - uses: actions/checkout@v2
      - name: Download package for install testing
        uses: actions/download-artifact@v2
        with:
          name: rfbrowser-wheel
      - name: Download package for install testing
        uses: actions/download-artifact@v2
        with:
          name: demoapp
          path: zip_results/demoapp
      - name: Unzip demoapp in linux or MacOS
        if: matrix.os != 'windows-latest'
        run: |
          ls -l zip_results/demoapp
          unzip -o zip_results/demoapp/demo-app-linux.zip
      - name: Unzip demoapp in windows
        if: matrix.os == 'windows-latest'
        run: |
          dir zip_results/demoapp
          tar -xf zip_results/demoapp/demo-app-win32.zip
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Robot Framework Browser on unix-like
        run: |
          pip install ./robotframework_browser-*-py3-none-any.whl
        if: matrix.os != 'windows-latest'
      - name: Install Robot Framework Browser on windows
        run: |
          pip install (gci *.whl)
        if: matrix.os == 'windows-latest'
      - name: Install node deps and python deps for test running
        run: |
          rfbrowser init
          pip install wheel
          pip install -r Browser/dev-requirements.txt
      - name: Test on unix-like os - serial mode
        if: matrix.os == 'ubuntu-latest'
        run: |
          echo ${{ matrix.os }}
          rm -rf Browser
          export DISPLAY=:99.0
          Xvfb -ac :99 -screen 0 1280x1024x16 > /dev/null 2>&1 &
          xvfb-run --auto-servernum invoke atest-robot
      - name: Run Robot Framework tests on windows or macOS
        if: ${{ matrix.os != 'ubuntu-latest' }}
        run: |
          echo ${{ matrix.os }}
          Remove-Item -Path .\Browser -Force -Recurse
          invoke atest-robot
      - name: Artifacts download for flaky test analysis
        if: ${{ failure() }}
        # flaky-tests-detection here because it is huge and not needed for the test-install
        run: |
          pip install flaky-tests-detection
          python download_file.py --project  MarketSquare --repo robotframework-browser --token ${{ secrets.GITHUB_TOKEN }}
          inv copy-xunit
      - name: Flaky tests detection
        if: ${{ failure() }}
        run: |
          flaky --junit-files=flip_rate/xunit/ --grouping-option=days --window-size=2 --window-count=5 --top-n=10
      - name: Uninstall on Linux or MacOS
        if: ${{ matrix.os != 'windows-latest' }}
        run: |
          rfbrowser clean-node
          pip uninstall --yes robotframework-browser
      - uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: ${{ matrix.os }} ${{ matrix.python-version }} ${{ matrix.node-version }} Clean install results
          path: atest/output
