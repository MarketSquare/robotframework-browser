syntax = "proto3";

message Request {
  message Empty {}

  message ScreenshotPath {
    string path = 1;
  }

  message Browser {
    string browser = 1;
    bool headless = 2;
    string rawOptions = 3;
  }

  message Context {
    string rawOptions = 1;
  }

  message Url {
    string url= 1;
  }

  message TextInput {
    string input = 1;
    string selector = 2;
    bool type = 3;
  }

  message ElementProperty {
    string property = 1;
    string selector = 2;
  }

  message TypeText {
    string selector = 1;
    string text = 2;
    int32 delay = 3;
    bool clear = 4;
  }

  message FillText {
    string selector = 1;
    string text = 2;
  }

  message ClearText {
    string selector = 1;
  }

  message PressKeys {
    string selector = 1;
    repeated string key = 2;
  }

  message ElementSelector {
    string selector = 1;
  }

  message Timeout {
    float timeout = 1;
  }
  message Index {
    int32 index = 1;
  }

  message StyleTag {
    string content = 1;
  }

  message ElementSelectorWithOptions {
    string selector = 1;
    string options = 2;
  }

  message ElementSelectorWithDuration {
    string selector = 1;
    int32 duration = 2;
  }

  message SelectElementSelector {
    string selector = 1;
    string matcherJson = 2;
  }

  message JavascriptCode {
    string script = 1;
  }

  message RawJson {
    string script = 1;
  }
}

message SelectEntry {
  string value = 2;
  string label = 3;
  bool selected = 4;
}

message Response {
  message Empty {
    string log = 1;
  }
  message String {
    string log = 1;
    string body = 2;
  }
  message Bool {
    string log = 1;
    bool body = 2;
  }

  message Int {
    string log = 1;
    int32 body = 2;
  }

  message Select {
    repeated SelectEntry entry = 1;
  }

  message JavascriptExecutionResult {
    string log = 1;
    string result = 2;
  }
}

service  Playwright {
  rpc TakeScreenshot(Request.ScreenshotPath) returns (Response.String) {}
  /* Opens the url in currently open Playwright page */
  rpc GoTo(Request.Url) returns (Response.Empty) {}
  /* Navigate to the next page in history */
  rpc GoBack(Request.Url) returns (Response.Empty) {}
  /* Navigate to the previous page in history. */
  rpc GoForward(Request.Url) returns (Response.Empty) {}
  /* Gets title of currently open Playwright page */
  rpc GetTitle(Request.Empty) returns (Response.String) {}
  /* Returns the count of elements found with selector */
  rpc GetElementCount(Request.ElementSelector) returns (Response.Int) {}
  /* Wraps playwrights page.fill to input text into input specified with selector */
  rpc InputText(Request.TextInput) returns (Response.Empty) {}
   /* Wraps playwrights page.type to type text into input specified with selector */
  rpc TypeText(Request.TypeText) returns (Response.Empty) {}
  /* Wraps playwrights page.fill to fill text of input specified with selector */
  rpc FillText(Request.FillText) returns (Response.Empty) {}
  /* Wraps playwrights page.fill with empty text to clear input specified with selector */
  rpc ClearText(Request.ClearText) returns (Response.Empty) {}
  /* Gets the DOM property 'property' of selector specified element */
  rpc GetDomProperty(Request.ElementProperty) returns (Response.String) {}
  /* Gets the boolean DOM property 'property' of selector specified element */
  rpc GetBoolProperty(Request.ElementProperty) returns (Response.Bool) {}
  /* Wraps playwrights page.textContent, returns textcontent of element by selector */
  rpc GetTextContent(Request.ElementSelector) returns (Response.String) {}
  /* *Returns current playwright page url*/
  rpc GetUrl(Request.Empty) returns (Response.String) {}
  /* Clicks element specified by selector */
  rpc Click(Request.ElementSelector) returns (Response.Empty) {}
  /* Inputs a list of keypresses to element specified by selector */
  rpc Press(Request.PressKeys) returns (Response.Empty) {}
  /* Gets the Select element specified by selector and returns the contents */
  rpc GetSelectContent(Request.ElementSelector) returns (Response.Select) {}
  /* Selects option matching matcher in Select element matching selector */
  rpc SelectOption(Request.SelectElementSelector) returns (Response.Empty) {}
  /* Deselects options in Select element matching selector */
  rpc DeselectOption(Request.ElementSelector) returns (Response.Empty) {}
  /* Checks checkbox specified by selector */
  rpc CheckCheckbox(Request.ElementSelector) returns (Response.Empty) {}
  /* Unchecks checkbox specified by selector */
  rpc UncheckCheckbox(Request.ElementSelector) returns (Response.Empty) {}
  /* Health check endpoint for the service */
  rpc Health(Request.Empty) returns (Response.String) {}
  /* Set's  playwright timeout */
  rpc SetTimeout(Request.Timeout) returns (Response.Empty) {}
  /* Adds a <style> to head of site. */
  rpc AddStyleTag(Request.StyleTag) returns (Response.Empty) {}
  /* Highlights elements matching selector for duration */
  rpc HighlightElements(Request.ElementSelectorWithDuration) returns (Response.Empty) {}
  /* Clicks element specified by selector and options */
  rpc ClickWithOptions(Request.ElementSelectorWithOptions) returns (Response.Empty) {}
  /* Focuses element specified by selector */
  rpc Focus(Request.ElementSelector) returns (Response.Empty) {}
  /* Waits for element be in a specific state*/
  rpc WaitForElementsState(Request.ElementSelectorWithOptions) returns (Response.Empty) {}
  /* Executes javascript on the active page */
  rpc ExecuteJavascriptOnPage(Request.JavascriptCode) returns (Response.JavascriptExecutionResult) {}
  /* Get Page State JSON */
  rpc GetPageState(Request.Empty) returns (Response.JavascriptExecutionResult) {}

  /* Playwright State handling keywords */ 

  rpc AutoActivatePages(Request.Empty) returns (Response.Empty) {}
  rpc SwitchPage(Request.Index) returns (Response.Int) {}
  rpc SwitchContext(Request.Index) returns (Response.Int) {}
  rpc SwitchBrowser(Request.Index) returns (Response.Int) {}
  rpc CreatePage(Request.Url) returns (Response.Int) {}
  rpc CreateContext(Request.Context) returns (Response.Int) {}
  rpc CreateBrowser(Request.Browser) returns (Response.Int) {}
  rpc CloseBrowser(Request.Empty) returns (Response.Empty) {}
  rpc CloseAllBrowsers(Request.Empty) returns (Response.Empty) {}
}
