/* Copyright 2020-     Robot Framework Foundation */

/* Licensed under the Apache License, Version 2.0 (the "License"); */
/* you may not use this file except in compliance with the License. */
/* You may obtain a copy of the License at */

/*     http://www.apache.org/licenses/LICENSE-2.0 */

/* Unless required by applicable law or agreed to in writing, software */
/* distributed under the License is distributed on an "AS IS" BASIS, */
/* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. */
/* See the License for the specific language governing permissions and */
/* limitations under the License. */

syntax = "proto3";

message Request {
  message Empty {}

  message ScreenshotOptions {
    string path = 1;
    string selector = 2;
    bool fullPage = 3;
  }

  message FilePath {
    string path = 1;
  }

  message Json {
    string body = 1;
  }

  message MouseButtonOptions {
    string action = 1;
    string json = 2;
  }

  message KeyboardKeypress {
    string action = 1;
    string key = 2;
  }

  message KeyboardInputOptions {
    string action = 1;
    string input = 2;
    int32 delay = 3;
  }

  message Browser {
    string browser = 1;
    bool headless = 2;
    string rawOptions = 3;
  }

  message Context {
    string rawOptions = 1;
    bool hideRfBrowser = 2;
    int32 defaultTimeout = 3;
  }

  message Url {
    string url= 1;
    int32 defaultTimeout = 2;
  }

  message TextInput {
    string input = 1;
    string selector = 2;
    bool type = 3;
  }

  message ElementProperty {
    string selector = 1;
    string property = 2;
  }

  message TypeText {
    string selector = 1;
    string text = 2;
    int32 delay = 3;
    bool clear = 4;
  }

  message FillText {
    string selector = 1;
    string text = 2;
  }

  message ClearText {
    string selector = 1;
  }

  message PressKeys {
    string selector = 1;
    repeated string key = 2;
  }

  message ElementSelector {
    string selector = 1;
  }

  message Timeout {
    float timeout = 1;
  }
  message Index {
    string index = 1;
  }

  message IdWithTimeout {
    string id = 1;
    float timeout = 2;
  }

  message StyleTag {
    string content = 1;
  }

  message ElementSelectorWithOptions {
    string selector = 1;
    string options = 2;
  }

  message ElementSelectorWithDuration {
    string selector = 1;
    int32 duration = 2;
    string width = 3;
    string style = 4;
    string color = 5;
  }

  message SelectElementSelector {
    string selector = 1;
    string matcherJson = 2;
  }

  message JavascriptCode {
    string script = 1;
    string selector = 2;
  }

  message WaitForFunctionOptions {
    string script = 1;
    string selector = 2;
    string options = 3;
  }

  message PlaywrightObject {
    string info = 1;
  }

  message Viewport {
    int32 width = 1;
    int32 height = 2;
  }

  message HttpRequest {
     string url = 1;
     string method = 2;
     string body = 3;
     string headers = 4;
  }
  
  message HttpCapture {
    string urlOrPredicate = 1;
    float timeout = 2;
  }
  
  message Device {
    string name = 1;
  }

  message AlertAction {
    string alertAction = 1;
    string promptInput = 2;  
  }

  message Bool {
    bool value = 1;
  }
}

message Types {
  message SelectEntry {
    string value = 2;
    string label = 3;
    bool selected = 4;
  }
}

message Response {
  message Empty {
    string log = 1;
  }

  message String {
    string log = 1;
    string body = 2;
  }

  message Keywords {
    string log = 1;
    repeated string keywords = 2;
  }

  message Bool {
    string log = 1;
    bool body = 2;
  }

  message Int {
    string log = 1;
    int32 body = 2;
  }

  message Select {
    repeated Types.SelectEntry entry = 1;
  }

  message Json {
    string log = 1;
    string json = 2;
  }

  message JavascriptExecutionResult {
    string log = 1;
    string result = 2;
  }

  message NewPageResponse {
    string log = 1;
    string body = 2;
    string video = 3;
  }
}

service  Playwright {
  /* Cookie messages */
  rpc AddCookie(Request.Json) returns (Response.Empty);
  rpc GetCookies(Request.Empty) returns (Response.Json);
  rpc DeleteAllCookies(Request.Empty) returns (Response.Empty);
  /* Screen shot method */
  rpc TakeScreenshot(Request.ScreenshotOptions) returns (Response.String);
  /* Opens the url in currently open Playwright page */
  rpc GoTo(Request.Url) returns (Response.Empty);
  /* Navigate to the next page in history */
  rpc GoBack(Request.Empty) returns (Response.Empty);
  /* Navigate to the previous page in history. */
  rpc GoForward(Request.Empty) returns (Response.Empty);
  /* Gets title of currently open Playwright page */
  rpc GetTitle(Request.Empty) returns (Response.String);
  /* Returns the count of elements found with selector */
  rpc GetElementCount(Request.ElementSelector) returns (Response.Int);
  /* Wraps playwrights page.fill to input text into input specified with selector */
  rpc InputText(Request.TextInput) returns (Response.Empty);
   /* Wraps playwrights page.type to type text into input specified with selector */
  rpc TypeText(Request.TypeText) returns (Response.Empty);
  /* Wraps playwrights page.fill to fill text of input specified with selector */
  rpc FillText(Request.FillText) returns (Response.Empty);
  /* Wraps playwrights page.fill with empty text to clear input specified with selector */
  rpc ClearText(Request.ClearText) returns (Response.Empty);
  /* Gets the DOM property 'property' of selector specified element */
  rpc GetDomProperty(Request.ElementProperty) returns (Response.String);
  /* Gets the XML attribute 'attribute' of selector specified element */
  rpc GetElementAttribute(Request.ElementProperty) returns (Response.String);
  /* Gets the boolean DOM property 'property' of selector specified element */
  rpc GetBoolProperty(Request.ElementProperty) returns (Response.Bool);
  /* Wraps playwrights page.textContent, returns textcontent of element by selector */
  rpc GetViewportSize(Request.Empty) returns (Response.Json);
  /* Returns current playwright page url*/
  rpc GetUrl(Request.Empty) returns (Response.String);
  /* Gets pages HTML code */
  rpc GetPageSource(Request.Empty) returns (Response.String);
  /* Inputs a list of keypresses to element specified by selector */
  rpc Press(Request.PressKeys) returns (Response.Empty);
  /* Gets the Select element specified by selector and returns the contents */
  rpc GetSelectContent(Request.ElementSelector) returns (Response.Select);
  /* Selects option matching matcher in Select element matching selector */
  rpc SelectOption(Request.SelectElementSelector) returns (Response.Empty);
  /* Deselects options in Select element matching selector */
  rpc DeselectOption(Request.ElementSelector) returns (Response.Empty);
  /* Checks checkbox specified by selector */
  rpc CheckCheckbox(Request.ElementSelector) returns (Response.Empty);
  /* Unchecks checkbox specified by selector */
  rpc UncheckCheckbox(Request.ElementSelector) returns (Response.Empty);
  /* Health check endpoint for the service */
  rpc Health(Request.Empty) returns (Response.String);
  /* Returns a reference to a Playwirght element handle.*/
  rpc GetElement(Request.ElementSelector) returns (Response.String);
  /* Returns references to multiple Playwirght element handles.*/
  rpc GetElements(Request.ElementSelector) returns (Response.Json);
  /* Set's  playwright timeout */
  rpc SetTimeout(Request.Timeout) returns (Response.Empty);
  /* Adds a <style> to head of site. */
  rpc AddStyleTag(Request.StyleTag) returns (Response.Empty);
  /* Highlights elements matching selector for duration */
  rpc HighlightElements(Request.ElementSelectorWithDuration) returns (Response.Empty);
  /* Download url content */
  rpc Download(Request.Url) returns (Response.String);
  /* Clicks element specified by selector and options */
  rpc Click(Request.ElementSelectorWithOptions) returns (Response.Empty);
  /* Hovers an element specified by selector and options */
  rpc Hover(Request.ElementSelectorWithOptions) returns (Response.Empty);
  /* Focuses element specified by selector */
  rpc Focus(Request.ElementSelector) returns (Response.Empty);
  /* Waits for element be in a specific state*/
  rpc WaitForElementsState(Request.ElementSelectorWithOptions) returns (Response.Empty);
  /* Executes javascript on the active page and retries until the expression is true */
  rpc WaitForFunction(Request.WaitForFunctionOptions) returns (Response.Json);
  /* Executes javascript on the active page */
  rpc ExecuteJavascript(Request.JavascriptCode) returns (Response.JavascriptExecutionResult);
  /* Get Page State JSON */
  rpc GetPageState(Request.Empty) returns (Response.JavascriptExecutionResult);
  rpc SetViewportSize(Request.Viewport) returns (Response.Empty);
  /* Gets an elements computed style */
  rpc GetStyle(Request.ElementSelector) returns (Response.Json);
  /* Gets elements x, y coordinates and width, height as json object */ 
  rpc GetBoundingBox(Request.ElementSelector) returns (Response.Json);
  /* Makes a `fetch` request in the browser */
  rpc HttpRequest(Request.HttpRequest) returns (Response.Json);
  rpc WaitForRequest(Request.HttpCapture) returns (Response.String);
  rpc WaitForResponse(Request.HttpCapture) returns (Response.Json);
  rpc WaitForDownload(Request.FilePath) returns (Response.Json);
  rpc WaitUntilNetworkIsIdle(Request.Timeout) returns (Response.Empty);
  /* Geolocation */
  rpc SetGeolocation(Request.Json) returns (Response.Empty);

  rpc GetDevice(Request.Device) returns (Response.Json);
  rpc GetDevices(Request.Empty) returns (Response.Json);

  rpc HandleAlert(Request.AlertAction) returns (Response.Empty);

  rpc MouseButton(Request.MouseButtonOptions) returns (Response.Empty);
  rpc MouseMove(Request.Json) returns (Response.Empty);

  rpc KeyboardKey(Request.KeyboardKeypress) returns (Response.Empty);
  rpc KeyboardInput(Request.KeyboardInputOptions) returns (Response.Empty);

  rpc UploadFile(Request.FilePath) returns (Response.Empty);

  rpc SetOffline(Request.Bool) returns (Response.Empty);
  rpc Reload(Request.Empty) returns (Response.Empty);

  /* Playwright State handling keywords */
  rpc SwitchPage(Request.IdWithTimeout) returns (Response.String);
  rpc SwitchContext(Request.Index) returns (Response.String);
  rpc SwitchBrowser(Request.Index) returns (Response.String);
  rpc NewPage(Request.Url) returns (Response.NewPageResponse);
  rpc NewContext(Request.Context) returns (Response.String);
  rpc NewBrowser(Request.Browser) returns (Response.String);
  rpc CloseBrowser(Request.Empty) returns (Response.String);
  rpc CloseAllBrowsers(Request.Empty) returns (Response.Empty);
  rpc CloseContext(Request.Empty) returns (Response.Empty);
  rpc ClosePage(Request.Empty) returns (Response.Empty);
  rpc GetBrowserCatalog(Request.Empty) returns (Response.Json);

  /* Extension handling */
  rpc InitializeExtension(Request.FilePath) returns (Response.Keywords);
}
